Version 0.9.3 8/15/2010
	Fixes
	* Fixed Verbose Logging. All logging is now outputted to log4j.
	* Fixed Nonempry dirs deleted by rmdir
	* Fixed extended attributes and dedupAll bit not being read from file meta-data
	
Version 0.9.2 5/2/2010
	Fixes	
	* Major Bug Fixed that removed data after time through garbage collection. All users should update to this release immediately.
	* Minor issue with copying attributes.
Version 0.9.1 4/24/2010
	Bug fixes and performance enhancements identified during testing on LVM volumes and NFS.
	Fixes :
	* Getting extended attributes that do not exist not exits as expected. This fix was needed for mounting of NFS mounted volumes
	Enhancements :
	* Caching of permissions improves performance for NFS writes.
	
Version 0.9.0 4/18/2010
	First Release of the 0.9.x tree. 0.9 will focus primarily of Volume Replication and bug fixes. SDFS has introduced a new 
	data scheme for file system meta data. This new scheme is not compatible with older volumes. If you would like to migrate
	to the newer volume structure you will need to copy data directly to a new SDFS volume. The DSE data structure is the same.
	Future versions will all be backwards compatible.
	Fixes :
	* Data Storage Issue within DSE: The DSE would only store 75% of the allocation size. This has been fixed and the DSE will now
	be able to be fully allocated.
	* Infinite Loop with Gabage Collection: There is an error within the Trove4J library used by the DSE that cause an infinite loop.
	A work around is in place that should help avoid the issue.
	* Possible infinite loop with DSE: There was an outlier condition found that cause the data storeage routine to hit an infinite loop.
	* Volumes not cleanly unmounted: A volume in not unmounted always when the application is killed.
	* ACLs for Directories and Symlinks: The mode was not being set correctly for directories and symlinks inheriting the permissions
	from the linked file
	Enhancements:
	* The data structure for file meta data has been changed to support volume replication and better performance for storing small 
	files. This change breaks compatibility with previous versions for SDFS. This is a one time change. Future versions will all be 
	backwards compatible.
	* Data Storage Performance has been increased by approximately 15% due to various DSE enhancements.
	* Better performance for file level snapshots.
	* Enables volume replication through rsync of volume namespace. DSE replication will be coming in later 0.9.x versions.
	
	
Version 0.8.15 4/12/2010
	This release focuses on enhancements and bug fixes found during scalability testing. 
	
	Fixes :
	* Symlink permission issues. Permissions were inherited from linked file. They are now independent. This is 
	consistent with native fs behaviors.
	* Fixed artificial limit found for hash tables. It is now possible to create volumes larger than 1TB at 4k chunk size.
	* Memory allocation fix. 1.6 GB memory was reclaimed. It is now possible to run small volumes of SDFS in under 100mb of RAM.
	Enhancements :
	* Minor ehancements that in total should increase performance by around 10%.  
	* Added warning and throws exception when the DSE is full. This is the first of many enhancements to come in this area.
	 
	
Version 0.8.14 4/4/2010
	This release was focused on bug fixes and enhancements related to performance testing. Take a look at 
	http://opendedup.org/index.php/perfmon for more details on performance metrics.

	Fixes:
	
	* File permissions when folders are created is now set properly
	* Fixed issue where SDFS kept file maps open even when files were closed
	* Last Modified for files are now being set correctly, when the file is written too.
	* Deleting of directories works correctly. When rmdir is called it will remove all children
	* When files are deleted that are removed from the file map table. This was not the case in previous versions.
	
	Enhancements
	
	* Performance tuning for reading with larger chunk sizes (64k,128k). The previous default for volume creation 
	required the read-ahead was set to "8". This is not efficient for large block sizes and has been fixed to and
	set to "1" if the block size is greater that 32k.
	
	
	