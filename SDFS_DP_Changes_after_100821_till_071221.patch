diff --git a/src/org/opendedup/sdfs/windows/utils/WinRegistry.java b/src/org/opendedup/sdfs/windows/utils/WinRegistry.java
index 8fd690d1..cf1d4d13 100644
--- a/src/org/opendedup/sdfs/windows/utils/WinRegistry.java
+++ b/src/org/opendedup/sdfs/windows/utils/WinRegistry.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (C) 2016 Sam Silverberg sam.silverberg@gmail.com
+ * Copyright (C) 2016 Sam Silverberg sam.silverberg@gmail.com
  *
  * This file is part of OpenDedupe SDFS.
  *
@@ -21,65 +21,97 @@ package org.opendedup.sdfs.windows.utils;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.StringWriter;
+import java.lang.reflect.InvocationTargetException;
+import org.opendedup.logging.SDFSLogger;

-
-public class WinRegistry {
-	public static final int HKEY_LOCAL_MACHINE = 0x80000002;
-
+public class WinRegistry {
 	public static final int KEY_SZ = 0;
     public static final int KEY_DWORD = 1;
+    private static final String REG_QUERY = "reg query ";
+    private static final String REG_STR = "REG_SZ";
+    private static final String REG_DWORD = "REG_DWORD";

+	static String readRegistryRegQuery(String key) throws IOException {
+        String useKey = REG_QUERY + key;
+        int keyType = -1;

-	public static final String readRegistry(String location, String key){
-        try {
-            // Run reg query, then read output with StreamReader (internal class)
-            Process process = Runtime.getRuntime().exec("reg query " +
-                    '"'+ location + "\" /v " + key);
+        Process process = Runtime.getRuntime().exec(useKey);
+        StreamReader reader = new StreamReader(process.getInputStream());

-            StreamReader reader = new StreamReader(process.getInputStream());
-            reader.start();
+        reader.start();
+        try {
             process.waitFor();
             reader.join();
-            String output = reader.getResult();
-
-            // Output has the following format:
-            // \n<Version information>\n\n<key>\t<registry type>\t<value>
-            if( ! output.contains("\t")){
-                    return null;
-            }
+        } catch (InterruptedException e) {
+        	SDFSLogger.getLog().error(e.getMessage());
+            Thread.currentThread().interrupt();
+        }

-            // Parse out the value
-            String[] parsed = output.split("\t");
-            return parsed[parsed.length-1];
+        String result = reader.getResult();
+        int p = -1;
+        if (result.contains(REG_STR)) {
+            p = result.indexOf(REG_STR);
+            keyType = KEY_SZ;
+        } else if (result.contains(REG_DWORD)) {
+            p = result.indexOf(REG_DWORD);
+            keyType = KEY_DWORD;
         }
-        catch (Exception e) {
+
+        if (p == -1) {
             return null;
         }

+        switch (keyType) {
+            case KEY_SZ:
+                return result.substring(p + REG_STR.length()).trim();
+            case KEY_DWORD:
+                String temp = result.substring(p + REG_DWORD.length()).trim();
+                return Integer.toString((Integer.parseInt(temp.substring("0x".length()), 16)));
+            default:
+                return "";
+        }
     }

     static class StreamReader extends Thread {
-        private InputStream is;
-        private StringWriter sw= new StringWriter();
+        private final InputStream mIs;
+
+        private final StringWriter mSw;

-        public StreamReader(InputStream is) {
-            this.is = is;
+        StreamReader(InputStream is) {
+            mIs = is;
+            mSw = new StringWriter();
         }

+        @Override
         public void run() {
+            int c;
             try {
-                int c;
-                while ((c = is.read()) != -1)
-                    sw.write(c);
+                while ((c = mIs.read()) != -1) {
+                    mSw.write(c);
+                }
+            } catch (IOException e) {
+            	SDFSLogger.getLog().error(e.getMessage());
             }
-            catch (IOException e) {
-        }
+
         }

-        public String getResult() {
-            return sw.toString();
+        String getResult() {
+            return mSw.toString();
         }
     }

+    public static String readRegistry(String location, String key) throws IOException {
+        String pathkey = "\"" +
+                location +
+                "\" /v " +
+                key;
+        return readRegistryRegQuery(pathkey);
+    }

+	public static void main(String[] args) throws IllegalArgumentException,
+			IllegalAccessException, InvocationTargetException {
+		//System.out.println(WinRegistry.readString(HKEY_LOCAL_MACHINE,
+		//		"SOFTWARE\\Wow6432Node\\SDFS", "path"));
+		System.out.println("Running Winregistry class");
+	}
 }
diff --git a/src/org/opendedup/util/OSValidator.java b/src/org/opendedup/util/OSValidator.java
index 4a82c493..d83ca3b3 100644
--- a/src/org/opendedup/util/OSValidator.java
+++ b/src/org/opendedup/util/OSValidator.java
@@ -67,13 +67,13 @@ public class OSValidator {
 	}

 	public static String getProgramBasePath() {
-		if (isUnix() || isMac())
-		if(Main.sdfsBasePath.equals("")) {
-							return "/opt/sdfs/";
-						} else {
-							return Main.sdfsBasePath;
-					}
-		else {
+		if (isUnix() || isMac()) {
+			if(Main.sdfsBasePath.equals("")) {
+				return "/opt/sdfs/";
+			} else {
+				return Main.sdfsBasePath;
+			}
+		} else {
 			try {
 				return WinRegistry.readRegistry(
 						"HKEY_LOCAL_MACHINE\\SOFTWARE\\WOW6432Node\\SDFS", "path") + File.separator;
@@ -85,9 +85,9 @@ public class OSValidator {
 	}

 	public static String getConfigPath() {
-		if (isUnix() || isMac())
-			return "/etc/sdfs/";
-		else
+		if (isUnix() || isMac()) {
+			return Main.sdfsBasePath + "/etc/sdfs/";
+		} else
 			try {
 				return WinRegistry.readRegistry(
 						"HKEY_LOCAL_MACHINE\\SOFTWARE\\WOW6432Node\\SDFS", "path")
